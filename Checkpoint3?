#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <string.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdint.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif

#define F_CPU 12000000UL

volatile unsigned char TimerFlag = 0;

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;


void TimerOn(){
	TCCR1B = 0x0B;
	
	
	OCR1A = 125;
	TIMSK1 = 0x02;
	TCNT1 = 0;
	_avr_timer_cntcurr = _avr_timer_M;
	
	SREG = 0x80;
}

void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
}

ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

void TimerSet(unsigned long M){
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

//FOR LCD

void LCD_init();
void LCD_ClearScreen(void);
void LCD_WriteCommand (unsigned char Command);
void LCD_Cursor (unsigned char column);
void LCD_DisplayString(unsigned char column , unsigned char *string);
void delay_ms(int miliSec);

#define SET_BIT(p,i) ((p) |= (1 << (i)))
#define CLR_BIT(p,i) ((p) &= ~(1 << (i)))
#define GET_BIT(p,i) ((p) & (1 << (i)))

/*-------------------------------------------------------------------------*/
#define DATA_BUS PORTC		// port connected to pins 7-14 of LCD display
#define CONTROL_BUS PORTD	// port connected to pins 4 and 6 of LCD disp.
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.
/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
}

void LCD_init(void) {

	//wait for 100 ms.
	LCD_WriteCommand(0x38);
	LCD_WriteCommand(0x06);
	LCD_WriteCommand(0x0f);
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
	DATA_BUS = Command;
	SET_BIT(CONTROL_BUS,E);
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
	SET_BIT(CONTROL_BUS,E);
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(1);
}

void LCD_DisplayString( unsigned char column, unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if(column < 17) { //16x1 LCD: column < 9
		LCD_WriteCommand(0x80 + column - 1); //16x2 LCD: column < 17
	}
	else {
		LCD_WriteCommand(0xB8 + column - 9); // 16x1 LCD: column - 1
	}
}

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
	{
		asm("nop");
	}
}

//FOR JOYSTICK

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
}

unsigned short ReadADC(unsigned char ch){
	ch = ch & 0x07;
	ADMUX |= ch;
	
	ADCSRA |= (1<<ADSC);
	
	while(!(ADCSRA & (1<<ADIF)));
	
	ADCSRA |= (1<<ADIF); //adc(1)
	
//	while(!(ADCSRA & (2<<ADIF)));
	
//	ADCSRA |= (2<<ADIF); //adc(2) ???
	
	return(ADC);
}

// FOR NOKIA 5110

//HUGE IMPLEMENTATION AHEAD

// The 7-bit ASCII character set...
// This charset font array is taken from Carlos Rodrigues <cefrodrigues@gmail.com> library for arduino.
const uint8_t CHARSET[][5] PROGMEM = {
	{ 0x00, 0x00, 0x00, 0x00, 0x00 },  // 20 space
	{ 0x00, 0x00, 0x5f, 0x00, 0x00 },  // 21 !
	{ 0x00, 0x07, 0x00, 0x07, 0x00 },  // 22 "
	{ 0x14, 0x7f, 0x14, 0x7f, 0x14 },  // 23 #
	{ 0x24, 0x2a, 0x7f, 0x2a, 0x12 },  // 24 $
	{ 0x23, 0x13, 0x08, 0x64, 0x62 },  // 25 %
	{ 0x36, 0x49, 0x55, 0x22, 0x50 },  // 26 &
	{ 0x00, 0x05, 0x03, 0x00, 0x00 },  // 27 '
	{ 0x00, 0x1c, 0x22, 0x41, 0x00 },  // 28 (
	{ 0x00, 0x41, 0x22, 0x1c, 0x00 },  // 29 )
	{ 0x14, 0x08, 0x3e, 0x08, 0x14 },  // 2a *
	{ 0x08, 0x08, 0x3e, 0x08, 0x08 },  // 2b +
	{ 0x00, 0x50, 0x30, 0x00, 0x00 },  // 2c ,
	{ 0x08, 0x08, 0x08, 0x08, 0x08 },  // 2d -
	{ 0x00, 0x60, 0x60, 0x00, 0x00 },  // 2e .
	{ 0x20, 0x10, 0x08, 0x04, 0x02 },  // 2f /
	{ 0x3e, 0x51, 0x49, 0x45, 0x3e },  // 30 0
	{ 0x00, 0x42, 0x7f, 0x40, 0x00 },  // 31 1
	{ 0x42, 0x61, 0x51, 0x49, 0x46 },  // 32 2
	{ 0x21, 0x41, 0x45, 0x4b, 0x31 },  // 33 3
	{ 0x18, 0x14, 0x12, 0x7f, 0x10 },  // 34 4
	{ 0x27, 0x45, 0x45, 0x45, 0x39 },  // 35 5
	{ 0x3c, 0x4a, 0x49, 0x49, 0x30 },  // 36 6
	{ 0x01, 0x71, 0x09, 0x05, 0x03 },  // 37 7
	{ 0x36, 0x49, 0x49, 0x49, 0x36 },  // 38 8
	{ 0x06, 0x49, 0x49, 0x29, 0x1e },  // 39 9
	{ 0x00, 0x36, 0x36, 0x00, 0x00 },  // 3a :
	{ 0x00, 0x56, 0x36, 0x00, 0x00 },  // 3b ;
	{ 0x08, 0x14, 0x22, 0x41, 0x00 },  // 3c <
	{ 0x14, 0x14, 0x14, 0x14, 0x14 },  // 3d =
	{ 0x00, 0x41, 0x22, 0x14, 0x08 },  // 3e >
	{ 0x02, 0x01, 0x51, 0x09, 0x06 },  // 3f ?
	{ 0x32, 0x49, 0x79, 0x41, 0x3e },  // 40 @
	{ 0x7e, 0x11, 0x11, 0x11, 0x7e },  // 41 A
	{ 0x7f, 0x49, 0x49, 0x49, 0x36 },  // 42 B
	{ 0x3e, 0x41, 0x41, 0x41, 0x22 },  // 43 C
	{ 0x7f, 0x41, 0x41, 0x22, 0x1c },  // 44 D
	{ 0x7f, 0x49, 0x49, 0x49, 0x41 },  // 45 E
	{ 0x7f, 0x09, 0x09, 0x09, 0x01 },  // 46 F
	{ 0x3e, 0x41, 0x49, 0x49, 0x7a },  // 47 G
	{ 0x7f, 0x08, 0x08, 0x08, 0x7f },  // 48 H
	{ 0x00, 0x41, 0x7f, 0x41, 0x00 },  // 49 I
	{ 0x20, 0x40, 0x41, 0x3f, 0x01 },  // 4a J
	{ 0x7f, 0x08, 0x14, 0x22, 0x41 },  // 4b K
	{ 0x7f, 0x40, 0x40, 0x40, 0x40 },  // 4c L
	{ 0x7f, 0x02, 0x0c, 0x02, 0x7f },  // 4d M
	{ 0x7f, 0x04, 0x08, 0x10, 0x7f },  // 4e N
	{ 0x3e, 0x41, 0x41, 0x41, 0x3e },  // 4f O
	{ 0x7f, 0x09, 0x09, 0x09, 0x06 },  // 50 P
	{ 0x3e, 0x41, 0x51, 0x21, 0x5e },  // 51 Q
	{ 0x7f, 0x09, 0x19, 0x29, 0x46 },  // 52 R
	{ 0x46, 0x49, 0x49, 0x49, 0x31 },  // 53 S
	{ 0x01, 0x01, 0x7f, 0x01, 0x01 },  // 54 T
	{ 0x3f, 0x40, 0x40, 0x40, 0x3f },  // 55 U
	{ 0x1f, 0x20, 0x40, 0x20, 0x1f },  // 56 V
	{ 0x3f, 0x40, 0x38, 0x40, 0x3f },  // 57 W
	{ 0x63, 0x14, 0x08, 0x14, 0x63 },  // 58 X
	{ 0x07, 0x08, 0x70, 0x08, 0x07 },  // 59 Y
	{ 0x61, 0x51, 0x49, 0x45, 0x43 },  // 5a Z
	{ 0x00, 0x7f, 0x41, 0x41, 0x00 },  // 5b [
	{ 0x02, 0x04, 0x08, 0x10, 0x20 },  //	backslash. this is one hilarrious problem.
	{ 0x00, 0x41, 0x41, 0x7f, 0x00 },  // 5d ]
	{ 0x04, 0x02, 0x01, 0x02, 0x04 },  // 5e ^
	{ 0x40, 0x40, 0x40, 0x40, 0x40 },  // 5f _
	{ 0x00, 0x01, 0x02, 0x04, 0x00 },  // 60 `
	{ 0x20, 0x54, 0x54, 0x54, 0x78 },  // 61 a
	{ 0x7f, 0x48, 0x44, 0x44, 0x38 },  // 62 b
	{ 0x38, 0x44, 0x44, 0x44, 0x20 },  // 63 c
	{ 0x38, 0x44, 0x44, 0x48, 0x7f },  // 64 d
	{ 0x38, 0x54, 0x54, 0x54, 0x18 },  // 65 e
	{ 0x08, 0x7e, 0x09, 0x01, 0x02 },  // 66 f
	{ 0x0c, 0x52, 0x52, 0x52, 0x3e },  // 67 g
	{ 0x7f, 0x08, 0x04, 0x04, 0x78 },  // 68 h
	{ 0x00, 0x44, 0x7d, 0x40, 0x00 },  // 69 i
	{ 0x20, 0x40, 0x44, 0x3d, 0x00 },  // 6a j
	{ 0x7f, 0x10, 0x28, 0x44, 0x00 },  // 6b k
	{ 0x00, 0x41, 0x7f, 0x40, 0x00 },  // 6c l
	{ 0x7c, 0x04, 0x18, 0x04, 0x78 },  // 6d m
	{ 0x7c, 0x08, 0x04, 0x04, 0x78 },  // 6e n
	{ 0x38, 0x44, 0x44, 0x44, 0x38 },  // 6f o
	{ 0x7c, 0x14, 0x14, 0x14, 0x08 },  // 70 p
	{ 0x08, 0x14, 0x14, 0x18, 0x7c },  // 71 q
	{ 0x7c, 0x08, 0x04, 0x04, 0x08 },  // 72 r
	{ 0x48, 0x54, 0x54, 0x54, 0x20 },  // 73 s
	{ 0x04, 0x3f, 0x44, 0x40, 0x20 },  // 74 t
	{ 0x3c, 0x40, 0x40, 0x20, 0x7c },  // 75 u
	{ 0x1c, 0x20, 0x40, 0x20, 0x1c },  // 76 v
	{ 0x3c, 0x40, 0x30, 0x40, 0x3c },  // 77 w
	{ 0x44, 0x28, 0x10, 0x28, 0x44 },  // 78 x
	{ 0x0c, 0x50, 0x50, 0x50, 0x3c },  // 79 y
	{ 0x44, 0x64, 0x54, 0x4c, 0x44 },  // 7a z
	{ 0x00, 0x08, 0x36, 0x41, 0x00 },  // 7b {
	{ 0x00, 0x00, 0x7f, 0x00, 0x00 },  // 7c |
	{ 0x00, 0x41, 0x36, 0x08, 0x00 },  // 7d }
	{ 0x10, 0x08, 0x08, 0x10, 0x08 },  // 7e ~
	{ 0x00, 0x00, 0x00, 0x00, 0x00 }   // 7f
};

#define PORT_LCD PORTB
#define DDR_LCD DDRB

#define LCD_SCE PB1
#define LCD_RST PB2
#define LCD_DC PB3
#define LCD_DIN PB4
#define LCD_CLK PB5

#define LCD_CONTRAST 0x40

void nokia_lcd_init(void);
void nokia_lcd_clear(void);
void nokia_lcd_power(uint8_t on);
void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value);
void nokia_lcd_write_char(char code, uint8_t scale);
void nokia_lcd_write_string(const char *str, uint8_t scale);
void nokia_lcd_set_cursor(uint8_t x, uint8_t y);
void nokia_lcd_render(void);

static struct {
    /* screen byte massive */
    uint8_t screen[504];

    /* cursor position */
    uint8_t cursor_x;
    uint8_t cursor_y;

} nokia_lcd = {
    .cursor_x = 0,
    .cursor_y = 0
};

/**
 * Sending data to LCD
 * @bytes: data
 * @is_data: transfer mode: 1 - data; 0 - command;
 */
static void write(uint8_t bytes, uint8_t is_data)
{
	register uint8_t i;
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);

	/* We are sending data */
	if (is_data)
		PORT_LCD |= (1 << LCD_DC);
	/* We are sending commands */
	else
		PORT_LCD &= ~(1 << LCD_DC);

	/* Send bytes */
	for (i = 0; i < 8; i++) {
		/* Set data pin to byte state */
		if ((bytes >> (7-i)) & 0x01)
			PORT_LCD |= (1 << LCD_DIN);
		else
			PORT_LCD &= ~(1 << LCD_DIN);

		/* Blink clock */
		PORT_LCD |= (1 << LCD_CLK);
		PORT_LCD &= ~(1 << LCD_CLK);
	}

	/* Disable controller */
	PORT_LCD |= (1 << LCD_SCE);
}

static void write_cmd(uint8_t cmd)
{
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
}

/*
 * Public functions
 */

void nokia_lcd_init(void)
{
	register unsigned i;
	/* Set pins as output */
	DDR_LCD |= (1 << LCD_SCE);
	DDR_LCD |= (1 << LCD_RST);
	DDR_LCD |= (1 << LCD_DC);
	DDR_LCD |= (1 << LCD_DIN);
	DDR_LCD |= (1 << LCD_CLK);

	/* Reset display */
	PORT_LCD |= (1 << LCD_RST);
	PORT_LCD |= (1 << LCD_SCE);
	_delay_ms(10);
	PORT_LCD &= ~(1 << LCD_RST);
	_delay_ms(70);
	PORT_LCD |= (1 << LCD_RST);

	/*
	 * Initialize display
	 */
	/* Enable controller */
	PORT_LCD &= ~(1 << LCD_SCE);
	/* -LCD Extended Commands mode- */
	write_cmd(0x21);
	/* LCD bias mode 1:48 */
	write_cmd(0x13);
	/* Set temperature coefficient */
	write_cmd(0x06);
	/* Default VOP (3.06 + 66 * 0.06 = 7V) */
	write_cmd(0xC2);
	/* Standard Commands mode, powered down */
	write_cmd(0x20);
	/* LCD in normal mode */
	write_cmd(0x09);

	/* Clear LCD RAM */
	write_cmd(0x80);
	write_cmd(LCD_CONTRAST);
	for (i = 0; i < 504; i++)
		write_data(0x00);

	/* Activate LCD */
	write_cmd(0x08);
	write_cmd(0x0C);
}

void nokia_lcd_clear(void)
{
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);
	/*Cursor too */
	nokia_lcd.cursor_x = 0;
	nokia_lcd.cursor_y = 0;
	/* Clear everything (504 bytes = 84cols * 48 rows / 8 bits) */
	for(i = 0;i < 504; i++)
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
		nokia_lcd.cursor_y += 7*scale + 1;
	}
	if (nokia_lcd.cursor_y >= 48) {
		nokia_lcd.cursor_x = 0;
		nokia_lcd.cursor_y = 0;
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
	nokia_lcd.cursor_y = y;
}

void nokia_lcd_render(void)
{
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
		write_data(nokia_lcd.screen[i]);
}

int main(void) {
	DDRA = 0x00; PORTA = 0xFF; //joystick inputs
	DDRC = 0xFF; PORTC = 0x00; //lcd
	DDRB = 0xFF; PORTB = 0x00; //nokia lcd
	DDRD = 0xFF; PORTD = 0x00; //joystick outputs debug
	
	unsigned short x;
	unsigned short y;
	unsigned short button = 0x04;
	unsigned char led = 0x00; //for joystick
	unsigned char lcd = 0x00; //for lcd
	
	TimerSet(1000);
	TimerOn();
	
	ADC_init();
	LCD_init();
	
	lcd = 0x02; //initial score
	
	LCD_Cursor(1);
	LCD_DisplayString(1, "Love Meter: "); //MAX AT 5
	LCD_WriteData(lcd + '0');
	
	//MOMENT OF TRUTH
	    nokia_lcd_init();
	    nokia_lcd_clear();
	    nokia_lcd_write_string("IT'S WORKING!",1);
	    nokia_lcd_set_cursor(0, 10);
	    nokia_lcd_write_string("Nice!", 3);
	    nokia_lcd_render();
	
	while (1) { //state machine and timer needed later
		x = ReadADC(0); //not needed
		y = ReadADC(1);
		//button = ReadADC(2);
		
		led = 0x00;
		
		PINA = 0x0F;
		
		if(!button) {
			LCD_DisplayString(1, "Pressed");
		}	
	
		if(y > 900){
			led = 0x02; //down
			lcd = lcd - 1;
			if(lcd > 0) {
				LCD_Cursor(13);
				LCD_WriteData(lcd + '0');
			}
			else {
				LCD_DisplayString(1, "You failed to get Jeff'd...");
			}
		}
		else if(y < 100){
			led = 0x01; //up
			lcd = lcd + 1;
			
			if(lcd < 5) {
				LCD_Cursor(13);
				LCD_WriteData(lcd + '0');
			}
			else {
				LCD_DisplayString(1, "You won his heart and got Jeff'd!");
			}
		}

		PORTD = led;
		while(!TimerFlag);
		TimerFlag = 0;
	}
	return 1;
}
