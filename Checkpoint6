#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <string.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdint.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif

#define F_CPU 12000000UL

volatile unsigned char TimerFlag = 0;

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerOn(){
	TCCR1B = 0x0B;
	
	
	OCR1A = 125;
	TIMSK1 = 0x02;
	TCNT1 = 0;
	_avr_timer_cntcurr = _avr_timer_M;
	
	SREG = 0x80;
}

void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
}

ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

void TimerSet(unsigned long M){
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

//FOR LCD

void LCD_init();
void LCD_ClearScreen(void);
void LCD_WriteCommand (unsigned char Command);
void LCD_Cursor (unsigned char column);
void LCD_DisplayString(unsigned char column , unsigned char *string);
void delay_ms(int miliSec);

#define SET_BIT(p,i) ((p) |= (1 << (i)))
#define CLR_BIT(p,i) ((p) &= ~(1 << (i)))
#define GET_BIT(p,i) ((p) & (1 << (i)))

/*-------------------------------------------------------------------------*/
#define DATA_BUS PORTC		// port connected to pins 7-14 of LCD display
#define CONTROL_BUS PORTD	// port connected to pins 4 and 6 of LCD disp.
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.
/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
}

void LCD_init(void) {

	//wait for 100 ms.
	LCD_WriteCommand(0x38);
	LCD_WriteCommand(0x06);
	LCD_WriteCommand(0x0f);
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
	DATA_BUS = Command;
	SET_BIT(CONTROL_BUS,E);
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
	SET_BIT(CONTROL_BUS,E);
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(1);
}

void LCD_DisplayString( unsigned char column, unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if(column < 17) { //16x1 LCD: column < 9
		LCD_WriteCommand(0x80 + column - 1); //16x2 LCD: column < 17
	}
	else {
		LCD_WriteCommand(0xB8 + column - 9); // 16x1 LCD: column - 1
	}
}

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
	{
		asm("nop");
	}
}

	unsigned short x;
	unsigned short y;
	unsigned short button = 0x04;
	unsigned char led = 0x00; //for joystick
	unsigned char lcd = 0x00; //for lcd
	
void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
}

unsigned short ReadADC(unsigned char ch){
	ch = ch & 0x07;
	ADMUX |= ch;
	
	ADCSRA |= (1<<ADSC);
	
	while(!(ADCSRA & (1<<ADIF)));
	
	ADCSRA |= (1<<ADIF); //adc(1)
	
	return(ADC);
}

enum States {init, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17} state;

int sm_tick(int state){
	switch(state) { //transitions
		case init:
			state = _0;
			break;
		case _0: 
			state = _1;
			break;
		case _1:
			state = _2;
			break;
		case _2:
			state = _3;
			break;
		case _3:
			if(y < 100){ 
				state = _4;
			}
			else if(y > 900){
				state = _5;
			}
			break;
		case _4:
			state = _6;
			break;
		case _5:
			state = _7;
			break;
		case _6:
			state = _8;
			break;
		case _7:
			state = _8;
			break;
		case _8:
			state = _9;
			break;
		case _9:
			state = _10;
			break;
		case _10:
			if(y < 100){
				state = _11;
			}
			else if(y > 900){
				state = _12;
			}
			break;
		case _11:
			state = _13;
			break;
		case _12:
			state = _14;
			break;
		case _13:
			state = _15;
			break;
		case _14:
			state = _15;
			break;
		case _15:
			state = _16;
			break;
		case _16:
			state = _17;
			break;
		default:
			break;
	}
	
	switch(state) { //actions (Add a separate state machine that keeps track of score
		case _0:                //|             //|             //|
			LCD_DisplayString(1, "You wake up.");
			_delay_ms(12000);
			LCD_DisplayString(1, "Then head to    school. ^");	
			break;
		case _1:
			LCD_DisplayString(1, "It's the first  day of school.");
			_delay_ms(12000);
			LCD_DisplayString(1, "You meet a cute girl(guy?)");
			_delay_ms(12000);
			LCD_DisplayString(1, "It's Jeffrey    McDaniel! ^");
			_delay_ms(12000);
			break;
		case _2:
			LCD_DisplayString(1, "She/he(?) is    looking at you.");
			_delay_ms(12000);
			LCD_DisplayString(1, "What do         you say? ^");
			_delay_ms(12000);
			break;
		case _3:
			LCD_DisplayString(1, "^ Hi!           v Just stare."); //spacing corrected
			break;
		case _4:
			LCD_DisplayString(1, "Jeff is         pleased");
			_delay_ms(12000);
			LCD_DisplayString(1, "that you said   hi to her/him. ^");			
			break;
		case _5:
			LCD_DisplayString(1, "Jeff is         thinks that");
			_delay_ms(12000);
			LCD_DisplayString(1, "you're weird    for not saying");					
			_delay_ms(12000);
			LCD_DisplayString(1, "anything        at all. ^");				
			_delay_ms(12000);
			break;
		case _6:
			LCD_DisplayString(1, "Jeff: Do you    want to");
			_delay_ms(12000);
			LCD_DisplayString(1, "talk about      state machines?^");
			_delay_ms(12000);
			break;
		case _7:
			LCD_DisplayString(1, "Jeff: Oh no.    That's not ^");
			_delay_ms(12000);
			LCD_DisplayString(1, "good at all.    Help me. ^");
			_delay_ms(12000);
			break;
		case _8:
			LCD_DisplayString(1, "After talking   to Jeff");
			_delay_ms(12000);
			LCD_DisplayString(1, "for a while,    he asks you");
			_delay_ms(12000);
			LCD_DisplayString(1, "something deep  and personal. ^");
			_delay_ms(12000);
			break;
		case _9:
			LCD_DisplayString(1, "Jeff: Do you have a heart?");
			break;
		case _10:
			LCD_DisplayString(1, "Yes?            Definitely not");
			break;
		case _11:
			LCD_DisplayString(1, "That's too bad because I'm a heartless person");
			break;
		case _12:
			break;
		default:
			break;
	}
	return state;
}

//only lcd and state machine included
//now add adc
//now add hiletgo

struct arrow{
	unsigned char name;
	unsigned char arr_C[6];
	unsigned char arr_B[6];
	unsigned char length;
};

int main(void) {
	
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
	
	TimerSet(1000);
	TimerOn();
	
	state = init;
	
	ADC_init();
	LCD_init();
		
	lcd = 0x02; //initial score
		
	LCD_Cursor(1);
	LCD_DisplayString(1, "Love Meter: "); //MAX AT 5
	LCD_WriteData(lcd + '0');
	
	struct arrow dir[4] = {
		{'L',{0xEF,0xCF,0x81,0xCF,0xEF},{0x04,0x08,0x10,0x20,0x40},5},
		{'R',{0xF7,0xF3,0x81,0xF3,0xF7},{0x04,0x08,0x10,0x20,0x40},5},
		{'U',{0xF7,0xE3,0xC1,0xF7,0xF7,0xF7},{0x02,0x04,0x08,0x10,0x20,0x40},6},
		{'D',{0xF7,0xF7,0xF7,0xC1,0xE3,0xF7},{0x02,0x04,0x08,0x10,0x20,0x40},6}		
	};

	unsigned char j = 0;
	unsigned char k = 0;
	unsigned short i = 0;
	
	while(1) {
		
		x = ReadADC(0);
		y = ReadADC(1);
		
		led = 0x00;
		
		//debug only
		if(y > 900) { //logic flip
			led = 0x01;
			state = sm_tick(state);
		}
		else if(y < 100) {
			led = 0x02;
			state = sm_tick(state);
		}
		
		PORTD = led;

		if(i == 400){
			j++;
			if(j == 4){
				j = 0;
			}
			i = 0;
		}
		PORTB = dir[j].arr_B[k];
		PORTC = dir[j].arr_C[k];
		
		k = k + 1;
		i = i + 1;
		
		if(k == dir[j].length){
			k = 0;
		}
		
		while(!TimerFlag);
		TimerFlag = 0;
	}
	return 1;
}
