#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <string.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdint.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif

//FOR TIMER

volatile unsigned char TimerFlag = 0;

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerOn(){
	TCCR1B = 0x0B;
	
	
	OCR1A = 125;
	TIMSK1 = 0x02;
	TCNT1 = 0;
	_avr_timer_cntcurr = _avr_timer_M;
	
	SREG = 0x80;
}

void TimerOff(){
	TCCR1B = 0x00;
}

void TimerISR(){
	TimerFlag = 1;
}

ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

void TimerSet(unsigned long M){
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

//FOR LCD

void LCD_init();
void LCD_ClearScreen(void);
void LCD_WriteCommand (unsigned char Command);
void LCD_Cursor (unsigned char column);
void LCD_DisplayString(unsigned char column , unsigned char *string);
void delay_ms(int miliSec);

#define SET_BIT(p,i) ((p) |= (1 << (i)))
#define CLR_BIT(p,i) ((p) &= ~(1 << (i)))
#define GET_BIT(p,i) ((p) & (1 << (i)))

/*-------------------------------------------------------------------------*/
#define DATA_BUS PORTC		// port connected to pins 7-14 of LCD display
#define CONTROL_BUS PORTD	// port connected to pins 4 and 6 of LCD disp.
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.
/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
}

void LCD_init(void) {

	//wait for 100 ms.
	LCD_WriteCommand(0x38);
	LCD_WriteCommand(0x06);
	LCD_WriteCommand(0x0f);
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
	DATA_BUS = Command;
	SET_BIT(CONTROL_BUS,E);
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
	SET_BIT(CONTROL_BUS,E);
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	delay_ms(1);
}

void LCD_DisplayString( unsigned char column, unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if(column < 17) { //16x1 LCD: column < 9
		LCD_WriteCommand(0x80 + column - 1); //16x2 LCD: column < 17
	}
	else {
		LCD_WriteCommand(0xB8 + column - 9); // 16x1 LCD: column - 1
	}
}

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
	{
		asm("nop");
	}
}

//FOR JOYSTICK

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
}

unsigned short ReadADC(unsigned char ch){
	ch = ch & 0x07;
	ADMUX |= ch;
	
	ADCSRA |= (1<<ADSC);
	
	while(!(ADCSRA & (1<<ADIF)));
	
	ADCSRA |= (1<<ADIF); //adc(1)
	
	//	while(!(ADCSRA & (2<<ADIF)));
	
	//	ADCSRA |= (2<<ADIF); //adc(2) ???
	
	return(ADC);
}



//STORY TIME BOIS

unsigned short x;
unsigned short y;
unsigned short score; //for lcd temp
unsigned char led = 0x00; //for joystick
unsigned char lcd = 0x00; //for lcd

enum States {init, wait, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17} state;

void sm_tick(){
	switch(state) { //transitions
		case init:
			state = wait;
			break;
		case wait:
		if(state == 0 && y > 900) {
			state = 1;
		}
		else if(state == 1 && y > 900) {
			state = 2;
		}
		else if(state == 2 && y > 900) {
			state = 3;
		}
		else if(state == 3) {
			if(y > 900) {
				state = 4;
			}
			else if(y < 100) {
				state = 5;
			}
		}
		else if(state == 4 && y > 900) {
			state = 6;
		}
		else if(state == 5 && y > 900) {
			state = 7;
		}
		else if(state == 6 && y > 900) {
			state = 8;
		}
		else if(state == 7 && y > 900) {
			state = 8;
		}
		else if(state == 8 && y > 900) {
			state = 9;
		}
		else if(state == 9 && y > 900) {
			state = 10;
		}
		else if(state == 10) {
			if(y > 900) {
				state = 11;
			}
			else(y < 100) {
				state = 12;
			}
		}
		else if(state == 11 && y > 900) {
			state = 13;
		}
		else if(state == 12 && y > 900) {
			state = 14;
		}
		else if(state == 13 && y > 900) {
			state = 15;
		}
		else if(state == 14 && y > 900) {
			state = 15;
		}
		else if(state == 15 && y > 900) {
			state = 16;
		}
		else if(state == 16 && y > 900) {
			state = 17;
		}
		break;
		case 0:
		state = wait;
		break;
		case 1:
		state = wait;
		break;
		case 2:
		state = wait;
		break;
		case 3:
		state = wait;
		break;
		case 4:
		state = wait;
		break;
		case 5:
		state = wait;
		break;
		case 6:
		state = wait;
		break;
		case 7:
		state = wait;
		break;
		case 8:
		state = wait;
		break;
		case 9:
		state = wait;
		break;
		case 10:
		state = wait;
		break;
		case 11:
		state = wait;
		break;
		case 12:
		state = wait;
		break;
		case 13:
		state = wait;
		break;
		case 14:
		state = wait;
		break;
		case 15:
		state = wait;
		break;
		case 16:
		state = wait;
		break;
		case 17:
		state = wait;
		break;
		default:
		break;
	}
	
	switch(state) { //actions
		case init:
			break;
		case wait:
			break;
		case 0:
			LCD_DisplayString(17, "Swag");
			break;
		case 1:
			LCD_DisplayString(17, "It's 1st day");
			break;
		case 2:
			LCD_DisplayString(17, "What to say");
			break;
		default:
			break;
	}
}

int main(void) {
	
	DDRA = 0x00; PORTA = 0xFF;
	DDRC = 0xFF; PORTC = 0x00;
	
	TimerSet(1000);
	TimerOn();
	
	score = 2;
	
	ADC_init();
	LCD_init();
	LCD_Cursor(1);
	LCD_DisplayString(1, "Love Meter: ");
	LCD_WriteData(score);
	
	while(1){
		x = ReadADC(0);
		y = ReadADC(1);
		sm_tick();
	}
	
	return 1;
}
